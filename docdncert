#!/usr/bin/env sh

set -f
LC_ALL=C

########################################
# GLOBAL VARIABLES
########################################

# Program variables
PRGNAM="docdncert"
VERSION="0.1.0"
VERBOSE="${VERBOSE:-0}"
DAEMON_MODE="${DAEMON_MODE:-false}"
DEBUG_MODE="${DEBUG_MODE:-false}"

# API Tokens
DIGITALOCEAN_TOKEN="${DIGITALOCEAN_TOKEN:-}"
CLOUDFLARE_API_TOKEN="${CLOUDFLARE_API_TOKEN:-}"

# Let's Encrypt/Certbot Variables
LE_EMAIL="${LE_EMAIL:-}"
CERTBOT_DNS_PLUGIN="${CERTBOT_DNS_PLUGIN:-cloudflare}"
CERTBOT_STAGING=false
CERTBOT_FORCE=false

# External Dependencies
CERTBOT_BIN="${CERTBOT_BIN:-$(command -v certbot)}"
CURL_BIN="${CURL_BIN:-$(command -v curl)}"
JQ_BIN="${JQ_BIN:-$(command -v jq)}"

# Passed automatically from certbot deploy hook
RENEWED_LINEAGE="${RENEWED_LINEAGE:-}"
RENEWED_DOMAINS="${RENEWED_DOMAINS:-}"

########################################
# FUNCTIONS
########################################

trap_exit() {
  "$DEBUG_MODE" || cleanup "$Temp_Dir"
}

########################################
# STDOUT & STDERR Functions
########################################

out() {
  printf %s\\n "$*"
}

die() {
  err "$*"
  exit 1
}

err() {
  if [ "$VERBOSE" -ge 0 ]; then
    >&2 out "$(color r)[$(now)] ERROR: $(color x)$*"
  fi
}

warn() {
  if [ "$VERBOSE" -ge 1 ]; then
    out "$(color y)[$(now)] WARN: $(color x)$*"
  fi
}

info() {
  if [ "$VERBOSE" -ge 1 ]; then
    out "$(color g)[$(now)] INFO: $(color x)$*"
  fi
}

debug() {
  if [ "$DEBUG" ]; then
    out "$(color w)[$(now)] DEBUG: $(color x)$*"
  fi
}

color() {
  _b=$(printf %b '\033[1m') # bold
  case "$1" in
    r) printf %b%b "$_b" '\033[33;31m' ;; # red
    g) printf %b%b "$_b" '\033[33;32m' ;; # green
    y) printf %b%b "$_b" '\033[33;33m' ;; # yellow
    w) printf %b%b "$_b" '\033[33;37m' ;; # white
    x) printf %b%b "$_b" '\033[m' ;;      # reset
    *) warn "color func usage: 'color [r,g,y,x]'" ; return 1 ;;
  esac
}

########################################
# I/O Functions
########################################

make_temp() {
  _dir="$Temp_Dir"
  _rand="$(head /dev/random | cksum | tr ' ' '.')" || { out "$_rand"; return 1; }
  _out="${_dir}/make_temp.${_rand}"
  _touch=$(touch "$_out") || { out "$_touch"; return 1; }
  out "$_out"
}
  
cleanup() {
  for f in "$@"; do
    if rm -rf "$f"; then
      debug "rm -rf $f"
    else
      err "$PRGNAM::cleanup unable to delete $1"
    fi
  done
}

path_to_string() {
  # Accept: path to a string or a variable with a string
  # Return: A string
  if [ -r "$1" ]; then
    cat "$1"
    return
  fi

  out "$1"
}

string_to_path() {
  # Accept: string converted to a path
  # Return: A path
  if [ -r "$1" ]; then
    out "$1"
    return
  fi

  _path="$(mktemp)"
  out "$1" > "$_path"
  out "$_path"
}

replace_newline() {
  # replace new lines of a file with \n
  sed 's/$/\\n/' "$(string_to_path "$1")" | tr -d '\n'
}

make_certname() {
  # Accepts: domain_name, leaf_cert
  # Returns: name format for DigitalOcean certificate
  _name=$(out "$1" | tr '.' '-')
  _cksum=$(cksum "$2" | cut -c1-8)
  out "${_name}-${_cksum}"
}

########################################
# Math & Time Functions
########################################

now() {
  TZ="UTC" date '+%Y-%m-%dT%H:%M:%SZ'
}

secs_left() {
  #debug "::days_left $*"
  _min=$(date_to_secs "$1") || { out "$_min"; return 1; }
  _sub=$(date_to_secs "$2") || { out "$_sub"; return 1; }
  printf %d\\n $(( _min - _sub )) || return 1
}


date_to_secs() {
  # GNU date
  if TZ="UTC" date -d "$1" '+%s' 2>/dev/null; then
    return
  fi
  
  # BSD date
  if TZ="UTC" date -j -f '%Y-%m-%dT%H:%M:%SZ' "$1" '+%s' 2>/dev/null; then
    return 
  fi

  out "$PRGNAM::date_to_seconds: Unable to convert time."
  return 1
}

is_int() {
  printf %d "$1" 2>/dev/null
}

########################################
# curl Functions
########################################

http_func() {
  # Accepts: method, endpoint, data (path to file)
  # Globals: DIGITALOCEAN_TOKEN, DO_API_Content_Type, CURL_BIN
  # Returns: Confirmation json with new CDN details
  _usage="http_func <method> <endpoint> <data>"
  [ -n "$*" ] || { out "Usage: $_usage" ; return 1; }
  case "$1" in usage) out "Usage: $_usage" ; return ;; esac
  _method="$1"
  _endpoint="$2"
  _data="$3"
  _content_type="$DO_API_Content_Type"
  _auth_bearer="$DIGITALOCEAN_TOKEN"
  _response="$(make_temp)" || { out "Cannot make tempfile."; return 1; }
  _ret_ok=""
  _ret=""

  # Check for bare-minimum defaults
  [ -x "$CURL_BIN" ] || { out "curl not found in path."; return 1; }
  [ -n "$DIGITALOCEAN_TOKEN" ] || { out "DIGITGALOCEAN_TOKEN unset"; return 1; }
  [ -n "$DO_API_Content_Type" ] || { out "DO_API_Content_Type unset"; return 1; }
  [ -n "$_endpoint" ] || { out "$PRGNAM::http_func: no endpoint"; return 1; }

  case "$_method" in
    GET|PUT) _ret_ok=200 ;;
    POST) _ret_ok=201 ;;
    PATCH|DELETE) _ret_ok=204 ;;
    *) out "$PRGNAM::http_func Invalid method." ; return 1 ;;
  esac

  if [ -n "$_data" ]; then
    _ret="$("$CURL_BIN" -s \
      -o "$_response" \
      -w '%{http_code}' \
      -X "$_method" \
      -H "Content-Type: $_content_type" \
      -H "Authorization: Bearer $_auth_bearer" \
      -d "@$_data" \
      "$_endpoint")" || { out "$_ret"; return 1; }
  else
    _ret="$("$CURL_BIN" -s \
      -o "$_response" \
      -w '%{http_code}' \
      -X "$_method" \
      -H "Content-Type: $_content_type" \
      -H "Authorization: Bearer $_auth_bearer" \
      "$_endpoint")" || { out "$_ret"; return 1; }
  fi

  if [ "$_ret" -ne "$_ret_ok" ]; then
    # Return the error code
    out "Error with $_method to $_endpoint"
    out "HTTP Error Code: $_ret"
    cat "$_response"
    return 1
  fi

  # Return the path to the json response
  cat "$_response"
}

########################################
# CDN Functions
########################################

cdn_list() {
  # Accepts: "help"
  # Globals: DIGITALOCEAN_TOKEN
  # Returns: json of all cdn endpoints
  _usage="cdn list [help]"
  case "$1" in help|usage) out "Usage: $_usage" ; return ;; esac
  _method="GET"
  _endpoint="$DO_CDN_Endpoint"
  _res=$(http_func \
    "$_method" \
    "$_endpoint") || { out "$_res"; return 1; }
  out "$_res"
}

cdn_get() {
  # Accepts: cdn_id
  # Globals: DIGITALOCEAN_TOKEN
  # Returns: json of all cdn endpoints
  _usage="cdn get <id>"
  [ -n "$1" ] || { out "Usage: $_usage"; return 1; }
  case "$1" in help|usage) out "Usage: $_usage" ; return ;; esac
  _cdn_id="$1"
  _method="GET"
  _endpoint="$DO_CDN_Endpoint/$_cdn_id"
  _res=$(http_func \
    "$_method" \
    "$_endpoint") || { out "$_res"; return 1; }
  out "$_res"
}

cdn_update() {
  # Accepts: cdn_id, origin, endpoint, created_at, certificate_id, domain, ttl
  # Globals: DIGITALOCEAN_TOKEN
  # Returns: Confirmation json with new CDN details
  _usage="cdn update <cdn_id> <certificate_id>"
  [ -n "$1" ] || { out "Usage: $_usage"; return 1; }
  case "$1" in help|usage) out "Usage: $_usage" ; return ;; esac
  _cdn_id="$1" 
  _cdn_origin="$2"
  _cdn_endpoint="$3"
  _cdn_created="$4"
  _new_cert_id="$5"
  _cdn_domain="$6"
  _cdn_ttl="$7"
  _method="PUT"
  _endpoint="$DO_CDN_Endpoint/$_cdn_id"
  _payload="$(make_temp)" || { out "$_payload"; return 1; }

  cat << EOF > "$_payload"
{"id": "$_cdn_id", "origin": "$_cdn_origin", "endpoint": "$_cdn_endpoint", "created_at": "$_cdn_created", "certificate_id": "$_new_cert_id", "custom_domain": "$_cdn_domain", "ttl": $_cdn_ttl}
EOF

  _res=$(http_func \
    "$_method" \
    "$_endpoint" \
    "$_payload") || { out "$_res"; return 1; }

  out "$_res"
}

########################################
# Certificate Functions
########################################

cert_list() {
  # Accepts: all, cert_id, help
  # Returns: json of all certificates
  _usage="cert list" 
  case "$1" in help|usage) out "Usage: $_usage" ; return ;; esac
  _method="GET"
  _endpoint="$DO_Cert_Endpoint"
  _res=$(http_func \
    "$_method" \
    "$_endpoint") || { out "$_res"; return 1; }
  out "$_res"
}

cert_get() {
  # Accepts: cert_id
  # Globals: DIGITALOCEAN_TOKEN
  # Returns: json of requested cert
  _usage="cert get <cert_id>"
  [ -n "$1" ] || { out "Usage: $_usage"; return 1; }
  case "$1" in usage) out "Usage: $_usage" ; return ;; esac
  _cert_id="$1"
  _method="GET"
  _endpoint="$DO_Cert_Endpoint/$_cert_id"
  _res=$(http_func \
    "$_method" \
    "$_endpoint") || { out "$_res"; return 1; }
  out "$_res"
}

cert_delete() {
  # Accepts: cert_id
  # Globals: DIGITALOCEAN_TOKEN
  # Returns: 0 if successful, HTTP code if an error
  _usage="cert delete <id>"
  [ -n "$1" ] || { out "Usage: $_usage"; return 1; }
  case "$1" in help|usage) out "Usage: $_usage" ; return ;; esac
  _cert_id="$1"
  _method="DELETE"
  _endpoint="$DO_Cert_Endpoint/$_cert_id"
  _res=$(http_func \
    "$_method" \
    "$_endpoint") || { out "$_res"; return 1; }
  out "$_cert_id deleted."
}

cert_issue() {
  # Accepts: cloudflare %%future dns plugins here?%% 
  _usage="cert issue <dns_plugin> <domain_name>"
  [ -n "$1" ] || { out "Usage: $_usage"; return 1; }
  case "$1" in
    help|usage) out "Usage: $_usage" ; return ;;
    cloudflare) cert_issue_dns_cloudflare "$2" ;;
    *) out "Usage: $_usage" ; return 1 ;;
  esac
}

cert_issue_dns_cloudflare() {
  # Accepts: domain_name
  # Globals: CLOUDFLARE_API_TOKEN, LE_EMAIL, CERTBOT_BIN
  # Returns: directory with certs, >1 if error
  _usage="cert issue cloudflare <domain_name>"
  [ -n "$1" ] || { out "Usage: $_usage"; return 1; }
  case "$1" in help|usage) out "Usage: $_usage" ; return ;; esac
  _domain_name="$1" 
  _deploy="$(make_temp)" || { out "$_deploy"; return 1; }
  _cf_ini="$(make_temp)" || { out "$_cf_ini"; return 1; }
  _cert_dir="$(make_temp)" || { out "$_cert_dir"; return 1; }
  _certbot=""

  [ -x "$CERTBOT_BIN" ] || { out "certbot not found in path"; return 1; }
  [ -n "$CLOUDFLARE_API_TOKEN" ] || { out "CLOUDFLARE_API_TOKEN unset."; return 1; }
  [ -n "$LE_EMAIL" ] || { out "LE_EMAIL not set."; return 1; }

  # Create deploy script
  # shellcheck disable=SC2016
  printf '#!/usr/bin/env sh\necho "$RENEWED_LINEAGE" > "$DCC_HOOK_RETURN"' > "$_deploy"
  chmod +x "$_deploy"

  # Create Cloudflare API INI
  out "dns_cloudflare_api_token = $CLOUDFLARE_API_TOKEN" > "$_cf_ini"

  # Export hook return variable
  export DCC_HOOK_RETURN="$_cert_dir"

  if "$CERTBOT_STAGING"; then
    # Issue Certificate
    _certbot=$("$CERTBOT_BIN" \
      certonly \
      --staging \
      --force-renew \
      --non-interactive \
      --agree-tos \
      --dns-cloudflare \
      --dns-cloudflare-credentials "$_cf_ini" \
      -d "$_domain_name" \
      -m "$LE_EMAIL" \
      --deploy-hook "$_deploy") || { out "$_certbot"; return 1; }
  else
    # Issue Certificate
    _certbot=$("$CERTBOT_BIN" \
      certonly \
      --force-renew \
      --non-interactive \
      --agree-tos \
      --dns-cloudflare \
      --dns-cloudflare-credentials "$_cf_ini" \
      -d "$_domain_name" \
      -m "$LE_EMAIL" \
      --deploy-hook "$_deploy") || { out "$_certbot"; return 1; }
  fi

  # Export the RENEWED_DOMAINS directory
  cat "$_cert_dir" 
}

cert_upload() {
  # Accepts: cert_name, private_key, leaf_certificate, certificate_chain
  # Globals: DIGITALOCEAN_TOKEN
  # Returns: New certificate_id
  _usage="cert upload <name> <private_key> <leaf_cert> <cert_chain>"
  [ -n "$*" ] || { out "Usage: $_usage"; return 1; }
  case "$1" in help|usage) out "Usage: $_usage" ;; esac
  _cert_name="$1"
  _private_key="$2"
  _leaf_cert="$3"
  _cert_chain="$4"
  _method="POST"
  _endpoint="$DO_Cert_Endpoint"
  _data="$(make_temp)" || { out "$_data"; return 1; }

  cat << EOF > "$_data"
  {
    "name": "$_cert_name",
    "type": "custom",
    "private_key": "$_private_key",
    "leaf_certificate": "$_leaf_cert",
    "certificate_chain": "$_cert_chain"
  }
EOF

  _res=$(http_func \
    "$_method" \
    "$_endpoint" \
    "$_data") || { out "$_res"; return 1; }

  out "$_res"
}

########################################
# Renew Functions
########################################

renew_all() {
  # Globals: JQ_BIN
  # Returns: 
  _cdn="" _total="" _cdn_id=""
  _renew=""

  [ -x "$JQ_BIN" ] || { err "jq not found in path."; return 1; }

  info "Getting cdn list..."
  _cdn_list_all=$(cdn list) || { err "$_cdn_list_all"; return 1; }

  info "Processing list..."
  _total=$(out "$_cdn_list_all" \
    | "$JQ_BIN" -r \
    .meta.total) || { err "$_total"; return 1; }

  while [ "$_total" -gt 0 ]; do
    _total=$(( _total - 1 ))
    _cdn_id=$(out "$_cdn_list_all" \
      | "$JQ_BIN" -r \
      .endpoints["$_total"].id) || { err "$_cdn_id"; return 1; }

    info "Found cdn $_cdn_id; attempting to renew..."
    _renew=$(renew "$_cdn_id") || { err "$_renew"; return 1; }
    info "$_renew"
  done
}

renew_by_id() {
  # Global: JQ_BIN, CERTBOT_DNS_PLUGIN
  # Accepts: cdn_id
  _usage="renew <cdn_id>"
  [ -n "$1" ] || { out "Usage: $_usage"; return 1; }
  case "$1" in help|usage) out "Usage: $_usage" ; return ;; esac
  _cdn_id="$1"
  _cdn=""         _cdn_origin=""    _cdn_endpoint=""  _cdn_created=""
  _old_cert_id="" _cdn_domain=""    _cdn_ttl=""
  _old_cert=""    _cert_expiry="" 
  _new_cert=""    _new_cert_id=""   _cdn_cert_id=""
  _update=""      _del=""

  [ -x "$JQ_BIN" ] || { out "jq not found in path"; return 1; }
  [ -n "$CERTBOT_DNS_PLUGIN" ] || { out "CERTBOT_DNS_PLUGIN unset"; return 1; }

  # Get cdn json
  if ! _cdn=$(cdn get "$_cdn_id"); then
    out "$_cdn"
    return 1
  fi

  _cdn_origin=$(out "$_cdn" \
    | "$JQ_BIN" -r \
    .endpoint.origin) || { out "$_cdn_origin"; return 1; }

  _cdn_endpoint=$(out "$_cdn" \
    | "$JQ_BIN" -r \
    .endpoint.endpoint) || { out "$_cdn_endpoint"; return 1; }
  
  _cdn_created=$(out "$_cdn" \
    | "$JQ_BIN" -r \
    .endpoint.created_at) || { out "$_cdn_created"; return 1; }

  _old_cert_id=$(out "$_cdn" \
    | "$JQ_BIN" -r \
    .endpoint.certificate_id) || { out "$_old_cert_id"; return 1; }

  _cdn_domain=$(out "$_cdn" \
    | "$JQ_BIN" -r \
    .endpoint.custom_domain) || { out "$_cdn_domain"; return 1; }

  _cdn_ttl=$(out "$_cdn" \
    | "$JQ_BIN" -r \
    .endpoint.ttl) || { out "$_cdn_ttl"; return 1; }

  # Get old certficiate json
  if ! _old_cert=$(cert get "$_old_cert_id"); then
    out "$_old_cert"
    return 1
  fi

  _cert_expiry=$(out "$_old_cert" \
    | "$JQ_BIN" -r \
    .certificate.not_after) || { out "$_cert_expiry"; return 1; }

  # Check if more than 60 days left on expiration
  # 1 day = 86400
  # 60 days = 5184000 seconds
  if ! "$CERTBOT_FORCE"; then
    _cert_expiry=$(date_to_secs "$_cert_expiry") || { out "$_cert_expiry"; return 1; }
    _now=$(date_to_secs "$(now)") || { out "$_now"; return 1; }
    _seconds_until_expired=$(( _cert_expiry - _now ))
    _days_until_expired=$(( _seconds_until_expired / 86400 ))
    if [ "$_seconds_until_expired" -gt 5184000 ]; then
      out "More than 60 days left ("$_days_until_expired" days) on $_cdn_domain certificates. Skipping."
      return
    fi
    out "Less than 60 days left on $_cdn_domain certificate."
  fi

  out "Issuing a new certificate for $_cdn_domain"
  # Issue a new certificate with Certbot
  if ! _cert_dir=$(cert issue "$CERTBOT_DNS_PLUGIN" "$_cdn_domain"); then
    out "$_cert_dir"
    return 1
  fi

  _private_key="$_cert_dir/$LE_Private_Key"
  _leaf_cert="$_cert_dir/$LE_Leaf_Certificate"
  _fullchain="$_cert_dir/$LE_Chain_Certificate"
  _cert_name=$(make_certname "$_cdn_domain" "$_leaf_cert") || \
    { out "$_cert_name"; return 1; }

  out "Uploading new cert."
  _new_cert=$(cert upload \
    "$_cert_name" \
    "$(replace_newline "$_private_key")" \
    "$(replace_newline "$_leaf_cert")" \
    "$(replace_newline "$_fullchain")") || { out "$_new_cert"; return 1; }

  _new_cert_id=$(out "$_new_cert" \
    | "$JQ_BIN" -r \
    .certificate.id) || { out "$_new_cert_id"; return 1; }

  # Update CDN with new certificate id
  out "Updating $_cdn_id with new certificate $_new_cert_id..."
  if ! _update=$(cdn update \
    "$_cdn_id" \
    "$_cdn_origin" \
    "$_cdn_endpoint" \
    "$_cdn_created" \
    "$_new_cert_id" \
    "$_cdn_domain" \
    "$_cdn_ttl"); then
      out "$_update"
      return 
  fi

  _att=0
  while [ "$_cdn_cert_id" != "$_new_cert_id" ]; do
    if [ "$_att" -gt 10 ]; then
      break
    fi

    # Get cdn json
    if ! _cdn=$(cdn get "$_cdn_id"); then
      out "$_cdn"
      return 1
    fi

    # Get current cdn certificate id
    _cdn_cert_id=$(out "$_cdn" \
      | "$JQ_BIN" -r \
      .endpoint.certificate_id) || { out "$_cdn_cert_id"; return 1; }

    out "Waiting 30 seconds for CDN update to propalgate. (Attempt: $_att/10)"
    sleep 30
    _att=$(( _att + 1 ))
  done

  if [ "$_cdn_cert_id" != "$_new_cert_id" ]; then
    out "Unable to update CDN certificate. Try doing it manually."
    return 1
  fi
  
  out "Successfully updated $_cdn_id."

   # Delete old certificate
  out "Deleting old certificate"
  if ! _del=$(cert delete "$_old_cert_id"); then
    out "$_del"
    return 1
  fi
  out "Deleted old certificate: $_old_cert_id."

}

########################################
# Runtime Variables
########################################

Temp_Dir="$(mktemp -d 2>/dev/null)" || Temp_Dir="/tmp/docdncert"
DO_API="https://api.digitalocean.com/v2"
DO_CDN_Endpoint="$DO_API/cdn/endpoints"
DO_Cert_Endpoint="$DO_API/certificates"
DO_API_Content_Type="application/json"
#LE_Cert_Dir="${RENEWED_LINEAGE:-}"
LE_Private_Key="privkey.pem"
LE_Leaf_Certificate="cert.pem"
LE_Chain_Certificate="fullchain.pem"

#######################################
# Entrypoint Functions
#######################################

cdn() {
  # Accepts: "list", "update", "help"
  _usage="cdn [list|get|update|help]"
  [ -n "$1" ] || { out "Usage: $_usage"; return 1; }
  case "$1" in
    list) shift ; cdn_list "$@" ;;
    get) shift ; cdn_get "$@" ;;
    update) shift ; cdn_update "$@" ;;
    help|usage) out "Usage: $_usage" ; return ;;
    *) out "$_usage" ; return 1 ;;
  esac
}

cert() {
  # Accepts: list, issue, upload, help
  _usage="cert [list|get|issue|upload]"
  [ -n "$1" ] || { out "Usage: $_usage"; return 1; }
  case "$1" in
    help|usage) out "Usage: $_usage" ; return ;;
    list) shift ; cert_list "$@" ;;
    get) shift ; cert_get "$@" ;;
    issue) shift ; cert_issue "$@" ;;
    upload) shift ; cert_upload "$@" ;;
    delete) shift; cert_delete "$@" ;;
    *) out "Usage: $_usage"; return 1 ;;
  esac
}

renew() {
  # Accepts: all, domain_name
  _usage="renew [all|<cdn_id>]"
  [ -n "$1" ] || { out "Usage: $_usage"; return 1; }
  case "$1" in
    help|usage) out "Usage: $_usage" ; return ;;
    all) renew_all ;;
    *) renew_by_id "$1" ;;
  esac
}

#######################################
# Main Function
#######################################

main() {
  _usage="$PRGNAM - $VERSION
[cdn|cert|renew] help"
  _arg_cmd=""
  while [ "$#" -gt 0 ]; do
    case "$1" in
      
      # Flags
      -e|--export) export "${2?}"; shift 2 ;;
      --export=*) export "${1#*=}" ; shift ;;
      -d|--debug) DEBUG_MODE=true; shift ;;
      -D|--daemon) DAEMON_MODE=true; shift ;;
      -m|--email) LE_EMAIL="$2" ; shift 2 ;;
      --email=*) LE_EMAIL="${1#*=}" ; shift ;;
      --cf-token) CLOUDFLARE_API_TOKEN="$2" ; shift 2 ;;
      --cf-token=*) CLOUDFLARE_API_TOKEN="${1#*=}" ; shift ;;
      --do-token) DIGITALOCEAN_TOKEN=$(path_to_string "$2"); shift 2 ;;
      --do-token=*) DIGITALOCEAN_TOKEN=$(path_to_string "${1#*=}"); shift ;;
      --dns-plugin) CERTBOT_DNS_PLUGIN="$2" ; shift 2 ;;
      --dns-plugin=*) CERTBOT_DNS_PLUGIN="${1#*=}" ; shift ;;
      --certbot) CERTBOT_BIN="$2" ; shift 2 ;;
      --certbot=*) CERTBOT_BIN="${1#*=}" ; shift ;;
      --force-renew) CERTBOT_FORCE=true ; shift ;;
      --staging) CERTBOT_STAGING=true ; shift ;;
      --curl) CURL_BIN="$2" ; shift 2 ;;
      --curl=*) CURL_BIN="${1#*=}" ; shift ;;
      --jq) JQ_BIN="$2" ; shift 2 ;;
      --jq=*) JQ_BIN="${1#*=}" ; shift ;;
      
      # Logging / Usage
      -v|--verbose) VERBOSE=1 ; shift ;;
      -q|--quiet) VERBOSE=-1 ; shift ;;
      -h|--help) out "Usage: $_usage" ; return ;;
      -*) out "Usage: $_usage" ; return 1 ;;
      *) _arg_cmd="$_arg_cmd $1" ; shift ;;
    esac
  done
  
  # Commands
  # Creating an array, globbing is intentional
  # shellcheck disable=SC2086
  set -- $_arg_cmd

  # Daemon Mode check
  if "$DAEMON_MODE"; then VERBOSE=3; fi

  # Debug Mode: Attempt to process ANY commands 
  if "$DEBUG_MODE"; then "$@" ; return; fi

  # Normal mode: only accept program functions
  case "$1" in
    cdn|cert|renew) "$@" ;;
    *) out "Usage: $_usage" ; return 1 ;;
  esac

}
trap trap_exit EXIT
main "$@"
